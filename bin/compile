#!/bin/sh

#############################################################
## Provides a modular system for custom heroku deployments ##
##							   							   ##
## Author: Jorgen Evens <jorgen@evens.eu>                  ##
## License: New BSD License				   				   ##
##										   				   ##
## Contributions by:	 				   				   ##
## Wim Mostmans ( https://github.com/Sitebase )			   ##
#############################################################

BIN_DIR=$(dirname $0)

# Include helper
. "$BIN_DIR/helper.sh"
. "$BIN_DIR/callback.sh"

INSTALL="${CONFIG_DIR}/install"
if [ -f "$INSTALL" ]; then
	INSTALL=`cat "$INSTALL"`
else
	INSTALL=""
fi

PACKAGE_MANAGER_ENABLED=0
if [ -f "${CONFIG_DIR}/repos" ]; then
	print_action "Package manager enabled."
	print "Repositories"
	for repo in `cat "${CONFIG_DIR}/repos"`; do
		print "- $repo"
	done
	PACKAGE_MANAGER_ENABLED=1
	. "${BIN_DIR}/package-manager.sh"
fi

# Initial boot file
cat > "${BUILD_DIR}/boot.sh" << EOF
#!/bin/sh

# Run configuration tasks first.
if [ -f "/app/configure.sh" ]; then
	chmod +x /app/configure.sh
	. /app/configure.sh
fi

EOF
chmod +x "${BUILD_DIR}/boot.sh"

# Mark a dependency as installed.
dependency_mark() {
        INSTALLED_DEPENDENCIES="$INSTALLED_DEPENDENCIES $1"
}

# Installs a dependency if it was previously found
# Keeps global INSTALLER_DIR intact
dependency_install() {
	local name
	local location
	local origin
	name="$1"
	location="$2"
	origin="$3"

	if [ ! -z "$3" ]; then
		origin="$3"
	fi

	callback_trigger "pre-install" "$name"

	# Store old package path so it can be restored after
	# the dependency is installed.
	local old_location
	old_location="${INSTALLER_DIR}"

	INSTALLER_DIR="`dirname \"${origin}\" | sed 's/\/*$//'`"

	# Install package
	. "${location}"
	dependency_mark "${name}"

	INSTALLER_DIR="${old_location}"

	callback_trigger "post-install" "$name"
}

# Include a dependency because someone relies on this.
dependency_require() {
	local package=$1
	# Test if it was included already
	echo " ${INSTALLED_DEPENDENCIES} " | grep -q " ${package} "
	if [ $? -eq 0 ]; then
		return;
	fi

	# Included in project
	if [ -f "${CONFIG_DIR}/installers/${package}.sh" ]; then
		dependency_install "${package}" "${CONFIG_DIR}/installers/${package}.sh"
		return;
	fi

	# Included in buildpack
	if [ -f "${BIN_DIR}/../installers/${package}.sh" ]; then
		dependency_install "${package}" "${BIN_DIR}/../installers/${package}.sh"
		return
	fi

	# Can be found in a repository
	if [ "$PACKAGE_MANAGER_ENABLED" -gt 0 ]; then
		package_search_interactive "${package}"
		if [ ! -z "$(package_search ${package})" ]; then
			package_install "${package}"
			return
		fi
	fi

	print_action "Installer for ${package} not found!"
	exit 1
}

callback_trigger "pre-dependencies"

# Install all packages contained within $INSTALL
for package in $INSTALL; do
	dependency_require "${package}"
done

callback_trigger "post-dependencies"

if [ -f "${CONFIG_DIR}/compile" ]; then
	callback_trigger "pre-compile"
	. "${CONFIG_DIR}/compile"
	callback_trigger "post-compile"
fi

echo "wait" >> "${BUILD_DIR}/boot.sh"

callback_trigger "done"
